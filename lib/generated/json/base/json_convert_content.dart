// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_bibi/http/a_entity.dart';
import 'package:flutter_bibi/generated/json/a_entity_helper.dart';


class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case AEntity:
				return aEntityFromJson(data as AEntity, json) as T;
			case AData:
				return aDataFromJson(data as AData, json) as T;
				return data as T;
		}
	}

		static _getToJson<T>(Type type, data) {
			switch (type) {
				case AEntity:
					return aEntityToJson(data as AEntity);
				case AData:
					return aDataToJson(data as AData);
			}
			return data as T;
		}

  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (AEntity).toString()){
			return AEntity().fromJson(json);
		}	else if(type == (AData).toString()){
			return AData().fromJson(json);
		}
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<AEntity>[] is M){
			return data.map<AEntity>((e) => AEntity().fromJson(e)).toList() as M;
		}	else if(<AData>[] is M){
			return data.map<AData>((e) => AData().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}